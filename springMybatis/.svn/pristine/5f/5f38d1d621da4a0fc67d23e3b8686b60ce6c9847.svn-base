package com.ggg.controller;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;


import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ggg.pojo.GridCondition;
import com.ggg.pojo.GridJSON;
import com.ggg.service.FileService;




@Controller
public class FileController {
	@Autowired
	private FileService fileService;
	
	@RequestMapping("/queryAllFile")
	@ResponseBody
	public GridJSON queryAllFile(HttpServletRequest request,HttpServletResponse response) throws Exception{
		String condition = request.getParameter("condition");
		String pageNumStr = request.getParameter("pageNum");
		String pageSizeStr = request.getParameter("pageSize");
		
		
		
		GridCondition conditions = new GridCondition();
		conditions.setCondition(condition);
		conditions.setPageNum(pageNumStr);
		conditions.setPageSize(pageSizeStr);
		
		
		  
		List<File> rows = fileService.queryFile(conditions);
		int total = fileService.queryAllCount(conditions);
		GridJSON json = new GridJSON();
		json.setRows(rows);
		json.setTotal(total);
		return json;
	}
	
	/**
	 * 上传
	 * 
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping("/fileUpload")
	@ResponseBody
	public void fileUpload(HttpServletRequest request, HttpServletResponse response) throws Exception {
		PrintWriter out = response.getWriter();
		
		// 文件名集合
				List<String> fileNameList = new ArrayList<String>();
		// 如果前端提交的数据是multipart
		if (ServletFileUpload.isMultipartContent(request)) {
			// 文件工厂
			FileItemFactory factory = new DiskFileItemFactory();
			// 根据文件工厂，实例化文件上传类，该类是官方提供的专门在servlet中接收文件上传的类
			ServletFileUpload fileUpload = new ServletFileUpload(factory);
			// 把前端请求中的文件存放到集合中
			List<FileItem> items = fileUpload.parseRequest(request);
			// 获取迭代器
			Iterator<FileItem> it = items.iterator();
			// 遍历上传的文件
			
			int count = 0;
			while (it.hasNext()) {
				// 获取上传的文件
				FileItem item = it.next();
				// 获取上传的文件名
				String fileName = item.getName();
				// 获取文件后缀名
				fileName = fileName.substring(fileName.lastIndexOf("."));
				// 时间戳+文件后缀名
				fileName = System.currentTimeMillis() + count++ + fileName;
				// 把文件写入到项目中webroot下的upload文件夹
				item.write(new File("../webapps" + request.getContextPath() + "/upload/" + fileName));
				// 将文件名添加到文件名集合
				fileNameList.add(fileName);
			}
			String allImgFileNameStr = Arrays.toString(fileNameList.toArray());
			out.print("<script>parent.postGoodsInfo('" + allImgFileNameStr + "')</script>");
		}
	}
	
	public List<File> doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setContentType("text/html");
		PrintWriter out = response.getWriter();

		String res = "[";
		File file = new File("E:/FTP/16122/03.提交作业");
		for (File f : file.listFiles()) {
			res += "{";
			if (f.isDirectory()) {
				res += "\"filename\":\"D:" + f.getName() + "\",";
				res += "\"length\":\"\",";
				res += "\"createtime\":\"D:" + f.lastModified() + "\"";
			} else {
				res += "\"filename\":\"D:" + f.getName() + "\",";
				res += "\"length\":\"" + f.length() + "\",";
				res += "\"createtime\":\"" + f.lastModified() + "\"";
			}
			res += "},";
		}
		res = res.substring(0, res.length() - 1);
		res += "]";

		// out.println("[{\"filename\":\"file1.txt\",\"length\":\"1234\",\"createtime\":\"2016.1.1.11:11\"},{\"filename\":\"file2.txt\",\"length\":\"1234\",\"createtime\":\"2016.1.1.11:11\"}]");
		out.println(res);
		out.flush();
		out.close();
		return null;
	}
	
}
